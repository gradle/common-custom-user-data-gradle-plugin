plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
    id 'com.gradle.plugin-publish' version '1.2.0'
    id 'com.github.breadmoirai.github-release' version '2.4.1'
    id 'org.gradle.wrapper-upgrade' version '0.11.1'
}

def releaseVersion = releaseVersion()
def releaseNotes = releaseNotes()

group = 'com.gradle'
version = releaseVersion.get()
description = 'A Gradle plugin to capture common custom user data used for Gradle Build Scans in Gradle Enterprise'

repositories {
    gradlePluginPortal()
}

dependencies {
    compileOnly 'com.gradle:gradle-enterprise-gradle-plugin:3.13.2'
    testImplementation(platform('org.junit:junit-bom:5.9.3'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

wrapperUpgrade {
    gradle {
        'common-custom-user-data-gradle-plugin' {
            repo = 'gradle/common-custom-user-data-gradle-plugin'
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

gradlePlugin {
    website = 'https://github.com/gradle/common-custom-user-data-gradle-plugin'
    vcsUrl = 'https://github.com/gradle/common-custom-user-data-gradle-plugin.git'

    automatedPublishing = true

    plugins {
        commonCustomUserData {
            id = 'com.gradle.common-custom-user-data-gradle-plugin'
            displayName = 'Gradle Enterprise Common Custom User Data Gradle Plugin'
            description = releaseNotes.get()
            implementationClass = 'com.gradle.CommonCustomUserDataGradlePlugin'
            tags.addAll('android', 'java', 'gradle enterprise')
        }
    }
}

tasks.withType(ValidatePlugins).configureEach {
    failOnWarning = true
    enableStricterValidation = true
}

test {
    useJUnitPlatform()
}

/*
The rest of the build logic in this file is only required for publishing to the Gradle Plugin Portal.
When using this project as a template for your own plugin to publish internally, you should delete all code following this comment.
You may also remove `plugin-publish` and `signing` from the `plugins {}` block above.
 */

signing {
    // Require publications to be signed on CI. Otherwise, publication will be signed only if keys are provided.
    required providers.environmentVariable('CI').isPresent()

    useInMemoryPgpKeys(
        providers.environmentVariable('PGP_SIGNING_KEY').orNull,
        providers.environmentVariable('PGP_SIGNING_KEY_PASSPHRASE').orNull
    )
}

githubRelease {
    token = System.getenv('CCUD_GIT_TOKEN') ?: ''
    owner = 'gradle'
    repo = 'common-custom-user-data-gradle-plugin'
    targetCommitish = 'main'
    releaseName = releaseVersion
    tagName = releaseVersion.map { "v$it" }
    prerelease = false
    overwrite = false
    generateReleaseNotes = false
    body = releaseNotes
}

def createReleaseTag = tasks.register('createReleaseTag', CreateGitTag) {
    // Ensure tag is created only after a successful publishing
    mustRunAfter('publishPlugins')
    tagName = githubRelease.tagName.map { it.toString() }
}

tasks.named('githubRelease').configure {
    dependsOn(createReleaseTag)
}

tasks.withType(com.gradle.publish.PublishTask) {
    notCompatibleWithConfigurationCache("$name task does not support configuration caching")
}

def releaseVersion() {
    def releaseVersionFile = layout.projectDirectory.file('release/version.txt')
    return providers.fileContents(releaseVersionFile).asText.map { it -> it.trim() }
}

def releaseNotes() {
    def releaseNotesFile = layout.projectDirectory.file('release/changes.md')
    return providers.fileContents(releaseNotesFile).asText.map { it -> it.trim() }
}
